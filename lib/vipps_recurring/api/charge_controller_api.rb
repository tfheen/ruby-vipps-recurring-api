=begin
#Recurring Payments Merchant API

## Recurring payments Recurring payments is used for subscription payments such as weekly dues for newspaper access, monthly dues for public transportation, etc. 1. A draft agreement is initialized and the user is redirected for approval. 2. The user approves the agreement and the merchant can call GET on the agreement to verify the status. 3. The merchant can start sending charges which will be charged the user in the future. The merchant is responsible for checking the status of charges, and cancelling any user access if charges are failing (or contacting the user). ## Authentication See <a href=\"#/Access%20Controller/getAccessToken\" target=\"_blank\">Get Access Token</a> For information regarding authentication please read [our guide](https://github.com/vippsas/vipps-recurring-api/blob/master/vipps-recurring-api.md#authentication-and-authorization---api-access-token)

The version of the OpenAPI document: 2.1.4

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1-SNAPSHOT

=end

require 'cgi'

module VippsRecurring
  class ChargeControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a Charge
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_id [String] The charge identifier (id)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Idempotency key
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [nil]
    def cancel_charge(agreement_id, charge_id, opts = {})
      cancel_charge_with_http_info(agreement_id, charge_id, opts)
      nil
    end

    # Cancel a Charge
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_id [String] The charge identifier (id)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :idempotency_key Idempotency key
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_charge_with_http_info(agreement_id, charge_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeControllerApi.cancel_charge ...'
      end
      # verify the required parameter 'agreement_id' is set
      if @api_client.config.client_side_validation && agreement_id.nil?
        fail ArgumentError, "Missing the required parameter 'agreement_id' when calling ChargeControllerApi.cancel_charge"
      end
      # verify the required parameter 'charge_id' is set
      if @api_client.config.client_side_validation && charge_id.nil?
        fail ArgumentError, "Missing the required parameter 'charge_id' when calling ChargeControllerApi.cancel_charge"
      end
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'].to_s.length > 40
        fail ArgumentError, 'invalid value for "opts[:"idempotency_key"]" when calling ChargeControllerApi.cancel_charge, the character length must be smaller than or equal to 40.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]*$/)
      if @api_client.config.client_side_validation && !opts[:'idempotency_key'].nil? && opts[:'idempotency_key'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"idempotency_key\"]' when calling ChargeControllerApi.cancel_charge, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/v2/agreements/{agreementId}/charges/{chargeId}'.sub('{' + 'agreementId' + '}', CGI.escape(agreement_id.to_s)).sub('{' + 'chargeId' + '}', CGI.escape(charge_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      header_params[:'Idempotency-Key'] = opts[:'idempotency_key'] if !opts[:'idempotency_key'].nil?
      header_params[:'Vipps-System-Name'] = opts[:'vipps_system_name'] if !opts[:'vipps_system_name'].nil?
      header_params[:'Vipps-System-Version'] = opts[:'vipps_system_version'] if !opts[:'vipps_system_version'].nil?
      header_params[:'Vipps-System-Plugin-Name'] = opts[:'vipps_system_plugin_name'] if !opts[:'vipps_system_plugin_name'].nil?
      header_params[:'Vipps-System-Plugin-Version'] = opts[:'vipps_system_plugin_version'] if !opts[:'vipps_system_plugin_version'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth', 'ocpSubscriptionKey']

      new_options = opts.merge(
        :operation => :"ChargeControllerApi.cancel_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeControllerApi#cancel_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Capture a reserved charge
    # @param idempotency_key [String] Idempotency key
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_id [String] The charge identifier (id)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [nil]
    def capture_charge(idempotency_key, agreement_id, charge_id, opts = {})
      capture_charge_with_http_info(idempotency_key, agreement_id, charge_id, opts)
      nil
    end

    # Capture a reserved charge
    # @param idempotency_key [String] Idempotency key
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_id [String] The charge identifier (id)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def capture_charge_with_http_info(idempotency_key, agreement_id, charge_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeControllerApi.capture_charge ...'
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling ChargeControllerApi.capture_charge"
      end
      if @api_client.config.client_side_validation && idempotency_key.to_s.length > 40
        fail ArgumentError, 'invalid value for "idempotency_key" when calling ChargeControllerApi.capture_charge, the character length must be smaller than or equal to 40.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]*$/)
      if @api_client.config.client_side_validation && idempotency_key !~ pattern
        fail ArgumentError, "invalid value for 'idempotency_key' when calling ChargeControllerApi.capture_charge, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'agreement_id' is set
      if @api_client.config.client_side_validation && agreement_id.nil?
        fail ArgumentError, "Missing the required parameter 'agreement_id' when calling ChargeControllerApi.capture_charge"
      end
      # verify the required parameter 'charge_id' is set
      if @api_client.config.client_side_validation && charge_id.nil?
        fail ArgumentError, "Missing the required parameter 'charge_id' when calling ChargeControllerApi.capture_charge"
      end
      # resource path
      local_var_path = '/v2/agreements/{agreementId}/charges/{chargeId}/capture'.sub('{' + 'agreementId' + '}', CGI.escape(agreement_id.to_s)).sub('{' + 'chargeId' + '}', CGI.escape(charge_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      header_params[:'Idempotency-Key'] = idempotency_key
      header_params[:'Vipps-System-Name'] = opts[:'vipps_system_name'] if !opts[:'vipps_system_name'].nil?
      header_params[:'Vipps-System-Version'] = opts[:'vipps_system_version'] if !opts[:'vipps_system_version'].nil?
      header_params[:'Vipps-System-Plugin-Name'] = opts[:'vipps_system_plugin_name'] if !opts[:'vipps_system_plugin_name'].nil?
      header_params[:'Vipps-System-Plugin-Version'] = opts[:'vipps_system_plugin_version'] if !opts[:'vipps_system_plugin_version'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth', 'ocpSubscriptionKey']

      new_options = opts.merge(
        :operation => :"ChargeControllerApi.capture_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeControllerApi#capture_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new charge
    # @param idempotency_key [String] Idempotency-Key
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_request [ChargeRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [ChargeReference]
    def create_charge(idempotency_key, agreement_id, charge_request, opts = {})
      data, _status_code, _headers = create_charge_with_http_info(idempotency_key, agreement_id, charge_request, opts)
      data
    end

    # Create a new charge
    # @param idempotency_key [String] Idempotency-Key
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_request [ChargeRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [Array<(ChargeReference, Integer, Hash)>] ChargeReference data, response status code and response headers
    def create_charge_with_http_info(idempotency_key, agreement_id, charge_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeControllerApi.create_charge ...'
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling ChargeControllerApi.create_charge"
      end
      if @api_client.config.client_side_validation && idempotency_key.to_s.length > 40
        fail ArgumentError, 'invalid value for "idempotency_key" when calling ChargeControllerApi.create_charge, the character length must be smaller than or equal to 40.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]*$/)
      if @api_client.config.client_side_validation && idempotency_key !~ pattern
        fail ArgumentError, "invalid value for 'idempotency_key' when calling ChargeControllerApi.create_charge, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'agreement_id' is set
      if @api_client.config.client_side_validation && agreement_id.nil?
        fail ArgumentError, "Missing the required parameter 'agreement_id' when calling ChargeControllerApi.create_charge"
      end
      # verify the required parameter 'charge_request' is set
      if @api_client.config.client_side_validation && charge_request.nil?
        fail ArgumentError, "Missing the required parameter 'charge_request' when calling ChargeControllerApi.create_charge"
      end
      # resource path
      local_var_path = '/v2/agreements/{agreementId}/charges'.sub('{' + 'agreementId' + '}', CGI.escape(agreement_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Idempotency-Key'] = idempotency_key
      header_params[:'Vipps-System-Name'] = opts[:'vipps_system_name'] if !opts[:'vipps_system_name'].nil?
      header_params[:'Vipps-System-Version'] = opts[:'vipps_system_version'] if !opts[:'vipps_system_version'].nil?
      header_params[:'Vipps-System-Plugin-Name'] = opts[:'vipps_system_plugin_name'] if !opts[:'vipps_system_plugin_name'].nil?
      header_params[:'Vipps-System-Plugin-Version'] = opts[:'vipps_system_plugin_version'] if !opts[:'vipps_system_plugin_version'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(charge_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ChargeReference'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth', 'ocpSubscriptionKey']

      new_options = opts.merge(
        :operation => :"ChargeControllerApi.create_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeControllerApi#create_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a Charge
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_id [String] The charge identifier (id)
    # @param [Hash] opts the optional parameters
    # @return [Charge]
    def get_charge(agreement_id, charge_id, opts = {})
      data, _status_code, _headers = get_charge_with_http_info(agreement_id, charge_id, opts)
      data
    end

    # Fetch a Charge
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_id [String] The charge identifier (id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Charge, Integer, Hash)>] Charge data, response status code and response headers
    def get_charge_with_http_info(agreement_id, charge_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeControllerApi.get_charge ...'
      end
      # verify the required parameter 'agreement_id' is set
      if @api_client.config.client_side_validation && agreement_id.nil?
        fail ArgumentError, "Missing the required parameter 'agreement_id' when calling ChargeControllerApi.get_charge"
      end
      # verify the required parameter 'charge_id' is set
      if @api_client.config.client_side_validation && charge_id.nil?
        fail ArgumentError, "Missing the required parameter 'charge_id' when calling ChargeControllerApi.get_charge"
      end
      # resource path
      local_var_path = '/v2/agreements/{agreementId}/charges/{chargeId}'.sub('{' + 'agreementId' + '}', CGI.escape(agreement_id.to_s)).sub('{' + 'chargeId' + '}', CGI.escape(charge_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Charge'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth', 'ocpSubscriptionKey']

      new_options = opts.merge(
        :operation => :"ChargeControllerApi.get_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeControllerApi#get_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Charges
    # @param agreement_id [String] The agreement identifier (id)
    # @param [Hash] opts the optional parameters
    # @option opts [ChargeStatus] :charge_status The status of the charge (default to 'PENDING')
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [Array<Charge>]
    def list_charges(agreement_id, opts = {})
      data, _status_code, _headers = list_charges_with_http_info(agreement_id, opts)
      data
    end

    # List Charges
    # @param agreement_id [String] The agreement identifier (id)
    # @param [Hash] opts the optional parameters
    # @option opts [ChargeStatus] :charge_status The status of the charge
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [Array<(Array<Charge>, Integer, Hash)>] Array<Charge> data, response status code and response headers
    def list_charges_with_http_info(agreement_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeControllerApi.list_charges ...'
      end
      # verify the required parameter 'agreement_id' is set
      if @api_client.config.client_side_validation && agreement_id.nil?
        fail ArgumentError, "Missing the required parameter 'agreement_id' when calling ChargeControllerApi.list_charges"
      end
      # resource path
      local_var_path = '/v2/agreements/{agreementId}/charges'.sub('{' + 'agreementId' + '}', CGI.escape(agreement_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chargeStatus'] = opts[:'charge_status'] if !opts[:'charge_status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      header_params[:'Vipps-System-Name'] = opts[:'vipps_system_name'] if !opts[:'vipps_system_name'].nil?
      header_params[:'Vipps-System-Version'] = opts[:'vipps_system_version'] if !opts[:'vipps_system_version'].nil?
      header_params[:'Vipps-System-Plugin-Name'] = opts[:'vipps_system_plugin_name'] if !opts[:'vipps_system_plugin_name'].nil?
      header_params[:'Vipps-System-Plugin-Version'] = opts[:'vipps_system_plugin_version'] if !opts[:'vipps_system_plugin_version'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Charge>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth', 'ocpSubscriptionKey']

      new_options = opts.merge(
        :operation => :"ChargeControllerApi.list_charges",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeControllerApi#list_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refund a charge
    # @param idempotency_key [String] Idempotency key
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_id [String] The charge identifier (id)
    # @param refund_request [RefundRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [nil]
    def refund_charge(idempotency_key, agreement_id, charge_id, refund_request, opts = {})
      refund_charge_with_http_info(idempotency_key, agreement_id, charge_id, refund_request, opts)
      nil
    end

    # Refund a charge
    # @param idempotency_key [String] Idempotency key
    # @param agreement_id [String] The agreement identifier (id)
    # @param charge_id [String] The charge identifier (id)
    # @param refund_request [RefundRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :vipps_system_name The name of the ecommerce solution. One word in lowercase letters is good.
    # @option opts [String] :vipps_system_version The version number of the ecommerce solution.
    # @option opts [String] :vipps_system_plugin_name The name of the ecommerce plugin (if applicable). One word in lowercase letters is good.
    # @option opts [String] :vipps_system_plugin_version The version number of the ecommerce plugin (if applicable).
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def refund_charge_with_http_info(idempotency_key, agreement_id, charge_id, refund_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeControllerApi.refund_charge ...'
      end
      # verify the required parameter 'idempotency_key' is set
      if @api_client.config.client_side_validation && idempotency_key.nil?
        fail ArgumentError, "Missing the required parameter 'idempotency_key' when calling ChargeControllerApi.refund_charge"
      end
      if @api_client.config.client_side_validation && idempotency_key.to_s.length > 40
        fail ArgumentError, 'invalid value for "idempotency_key" when calling ChargeControllerApi.refund_charge, the character length must be smaller than or equal to 40.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]*$/)
      if @api_client.config.client_side_validation && idempotency_key !~ pattern
        fail ArgumentError, "invalid value for 'idempotency_key' when calling ChargeControllerApi.refund_charge, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'agreement_id' is set
      if @api_client.config.client_side_validation && agreement_id.nil?
        fail ArgumentError, "Missing the required parameter 'agreement_id' when calling ChargeControllerApi.refund_charge"
      end
      # verify the required parameter 'charge_id' is set
      if @api_client.config.client_side_validation && charge_id.nil?
        fail ArgumentError, "Missing the required parameter 'charge_id' when calling ChargeControllerApi.refund_charge"
      end
      # verify the required parameter 'refund_request' is set
      if @api_client.config.client_side_validation && refund_request.nil?
        fail ArgumentError, "Missing the required parameter 'refund_request' when calling ChargeControllerApi.refund_charge"
      end
      # resource path
      local_var_path = '/v2/agreements/{agreementId}/charges/{chargeId}/refund'.sub('{' + 'agreementId' + '}', CGI.escape(agreement_id.to_s)).sub('{' + 'chargeId' + '}', CGI.escape(charge_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Idempotency-Key'] = idempotency_key
      header_params[:'Vipps-System-Name'] = opts[:'vipps_system_name'] if !opts[:'vipps_system_name'].nil?
      header_params[:'Vipps-System-Version'] = opts[:'vipps_system_version'] if !opts[:'vipps_system_version'].nil?
      header_params[:'Vipps-System-Plugin-Name'] = opts[:'vipps_system_plugin_name'] if !opts[:'vipps_system_plugin_name'].nil?
      header_params[:'Vipps-System-Plugin-Version'] = opts[:'vipps_system_plugin_version'] if !opts[:'vipps_system_plugin_version'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(refund_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth', 'ocpSubscriptionKey']

      new_options = opts.merge(
        :operation => :"ChargeControllerApi.refund_charge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeControllerApi#refund_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
